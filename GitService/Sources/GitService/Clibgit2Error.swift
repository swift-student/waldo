//
//  Clibgit2Error.swift
//  Diffi
//
//  Created by Shawn Gee on 7/21/25.
//

import Clibgit2
import Foundation

struct Clibgit2Error: Error, CustomDebugStringConvertible {
    let code: Clibgit2ErrorCode
    let errorMessage: String?

    init(code: Clibgit2ErrorCode) {
        self.code = code

        if let error = git_error_last(),
           let errorMessage = String(validatingUTF8: error.pointee.message)
        {
            self.errorMessage = errorMessage
        } else {
            errorMessage = nil
        }
    }

    var debugDescription: String {
        var message = "Error code \(code.rawValue): \(code.description)."
        if let errorMessage {
            message += " " + errorMessage
        }
        return message
    }
}

enum Clibgit2ErrorCode: Int32 {
    private static let ok: Int32 = 0

    /// An error occurred; call `git_error_last` for more information.
    case error = -1

    /// Requested object could not be found.
    case notFound = -3
    /// Object exists preventing operation.
    case exists = -4
    /// More than one object matches.
    case ambiguous = -5
    /// Output buffer too short to hold data.
    case bufferTooShort = -6

    /// A special error that is never generated by libgit2 code.
    /// You can return it from a callback (e.g to stop an iteration)
    /// to know that it was generated by the callback and not by libgit2.
    case user = -7

    /// Operation not allowed on bare repository.
    case bareRepository = -8
    /// HEAD refers to branch with no commits.
    case unbornBranch = -9
    /// Merge in progress prevented operation.
    case unmerged = -10
    /// Reference was not fast-forwardable.
    case nonFastForward = -11
    /// Name/reference specification was not in a valid format.
    case invalidSpecification = -12
    /// Checkout conflicts prevented operation.
    case conflict = -13
    /// Lock file prevented operation.
    case locked = -14
    /// Reference value does not match expected.
    case modified = -15
    /// Authentication error.
    case authentication = -16
    /// Server certificate is invalid.
    case certificate = -17
    /// Patch/merge has already been applied.
    case applied = -18
    /// The requested peel operation is not possible.
    case peel = -19
    /// Unexpected end of file.
    case endOfFile = -20
    /// Invalid operation or input.
    case invalid = -21
    /// Uncommitted changes in index prevented operation.
    case uncommitted = -22
    /// The operation is not valid for a directory.
    case directory = -23
    /// A merge conflict exists and cannot continue.
    case mergeConflict = -24

    /// A user-configured callback refused to act.
    case passthrough = -30
    /// Signals end of iteration with iterator.
    case iterationOver = -31
    /// Internal only.
    case retry = -32
    /// Hashsum mismatch in object.
    case mismatch = -33
    /// Unsaved changes in the index would be overwritten.
    case indexDirty = -34
    /// Patch application failed.
    case applyFailed = -35
    /// The object is not owned by the current user.
    case owner = -36
    /// The operation timed out.
    case timeout = -37
    /// There were no changes.
    case unchanged = -38
    /// An option is not supported.
    case notSupported = -39
    /// The subject is read-only.
    case readOnly = -40

    /// Unknown Git error
    case unknown = -100

    init?(returnCode: Int32) {
        guard returnCode < Self.ok else {
            return nil
        }

        if let error = Self(rawValue: returnCode) {
            self = error
        } else {
            self = .unknown
        }
    }

    var description: String {
        switch self {
        case .error:
            "An error occurred"
        case .notFound:
            "The requested object could not be found"
        case .exists:
            "Object already exists"
        case .ambiguous:
            "More than one object matches the request"
        case .bufferTooShort:
            "Output buffer is too small"
        case .user:
            "Operation stopped by user callback"
        case .bareRepository:
            "Operation not allowed on bare repository"
        case .unbornBranch:
            "HEAD refers to a branch with no commits"
        case .unmerged:
            "Merge in progress prevents this operation"
        case .nonFastForward:
            "Reference cannot be fast-forwarded"
        case .invalidSpecification:
            "Name or reference specification is not valid"
        case .conflict:
            "Checkout conflicts prevent this operation"
        case .locked:
            "Lock file prevents this operation"
        case .modified:
            "Reference value does not match expected"
        case .authentication:
            "Authentication failed"
        case .certificate:
            "Server certificate is invalid"
        case .applied:
            "Patch or merge has already been applied"
        case .peel:
            "The requested peel operation is not possible"
        case .endOfFile:
            "Unexpected end of file"
        case .invalid:
            "Invalid operation or input"
        case .uncommitted:
            "Uncommitted changes prevent this operation"
        case .directory:
            "This operation is not valid for a directory"
        case .mergeConflict:
            "Merge conflict exists and cannot continue"
        case .passthrough:
            "User-configured callback refused to act"
        case .iterationOver:
            "End of iteration reached"
        case .retry:
            "Internal retry error"
        case .mismatch:
            "Hash mismatch in object"
        case .indexDirty:
            "Unsaved changes would be overwritten"
        case .applyFailed:
            "Patch application failed"
        case .owner:
            "Object is not owned by the current user"
        case .timeout:
            "Operation timed out"
        case .unchanged:
            "No changes were made"
        case .notSupported:
            "This option is not supported"
        case .readOnly:
            "The subject is read-only"
        case .unknown:
            "Unknown Git error"
        }
    }
}
